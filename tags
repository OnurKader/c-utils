!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUCKET_SIZE	quadtree.h	13;"	d
GRID_COL	game.h	24;"	d
GRID_H	game.h	21;"	d
GRID_LENGTH	game.h	26;"	d
GRID_ROW	game.h	23;"	d
GRID_W	game.h	20;"	d
Grid	game.h	/^struct Grid$/;"	s
HEIGHT	game.h	18;"	d
INPUT	game.h	/^	INPUT,$/;"	e	enum:state_t
List	doub_link_list.h	/^typedef struct List$/;"	s
List	doub_link_list.h	/^} List;$/;"	t	typeref:struct:List
MAX_LIST_LENGTH	doub_link_list.h	8;"	d
Node	doub_link_list.h	/^typedef struct Node$/;"	s
Node	doub_link_list.h	/^} Node;$/;"	t	typeref:struct:Node
OUTPUT	game.h	/^	OUTPUT$/;"	e	enum:state_t
POINT_COUNT	game.h	88;"	d
Point	quadtree.h	/^typedef SDL_FPoint Point;$/;"	t
QUADTREE_H	quadtree.h	2;"	d
QUITTING	game.h	/^	QUITTING,$/;"	e	enum:state_t
QuadTree	quadtree.h	/^typedef struct QuadTree$/;"	s
QuadTree	quadtree.h	/^} QuadTree;$/;"	t	typeref:struct:QuadTree
RUNNING	game.h	/^	RUNNING,$/;"	e	enum:state_t
Rect	quadtree.h	/^typedef SDL_FRect Rect;$/;"	t
VEC_H	vec.h	11;"	d
VEC_VERSION	vec.h	16;"	d
WIDTH	game.h	17;"	d
boundary	quadtree.h	/^	Rect boundary;$/;"	m	struct:QuadTree
deinitGame	game.h	/^void deinitGame(game_t* game)$/;"	f
elem	doub_link_list.h	/^	int64_t elem;$/;"	m	struct:Node
game_t	game.h	/^typedef struct game_t$/;"	s
game_t	game.h	/^} game_t;$/;"	t	typeref:struct:game_t
generatePoints	game.h	/^void generatePoints(void)$/;"	f
getFRect	grid.c	/^void getFRect(vec_frect_t* const vec, QuadTree* const qt)$/;"	f
grid	game.h	/^	struct Grid grid;$/;"	m	struct:game_t	typeref:struct:game_t::Grid
grid_t	game.h	/^typedef struct grid_t$/;"	s
grid_t	game.h	/^} grid_t;$/;"	t	typeref:struct:grid_t
grids	game.h	/^	grid_t grids[GRID_ROW][GRID_COL];$/;"	m	struct:Grid
head	doub_link_list.h	/^	Node *head, *tail;$/;"	m	struct:List
initGame	game.h	/^void initGame(game_t* game)$/;"	f
insertPointsIntoQT	grid.c	/^void insertPointsIntoQT(QuadTree* const qt, const SDL_Point* point_array)$/;"	f
intersects	quadtree.h	/^bool intersects(const Rect* const r1, const Rect* const r2)$/;"	f
length	doub_link_list.h	/^	size_t length;$/;"	m	struct:List
list_createNode	doub_link_list.h	/^Node* list_createNode(int64_t num)$/;"	f
list_destroy	doub_link_list.h	/^int8_t list_destroy(List* list)$/;"	f
list_init	doub_link_list.h	/^int8_t list_init(List** list)$/;"	f
list_insert	doub_link_list.h	/^int8_t list_insert(List* list, int64_t num, size_t index)$/;"	f
list_isEmpty	doub_link_list.h	/^int8_t list_isEmpty(List* list) { return (list->length == 0); }$/;"	f
list_pop	doub_link_list.h	/^int64_t list_pop(List* list)$/;"	f
list_print	doub_link_list.h	/^int8_t list_print(List* list)$/;"	f
list_push	doub_link_list.h	/^int8_t list_push(List* list, int64_t num)$/;"	f
list_remove	doub_link_list.h	/^int64_t list_remove(List* list, size_t index)$/;"	f
main	grid.c	/^int main(void)$/;"	f
main	main.c	/^int main(void)$/;"	f
makePoint	quadtree.h	/^Point makePoint(float x, float y) { return (Point){x, y}; }$/;"	f
makeRect	quadtree.h	/^Rect makeRect(const float x, const float y, const float w, const float h)$/;"	f
mouse	game.h	/^SDL_Point mouse;$/;"	v
next	doub_link_list.h	/^	struct Node *next, *prev;$/;"	m	struct:Node	typeref:struct:Node::Node
north_east	quadtree.h	/^	struct QuadTree* north_east;$/;"	m	struct:QuadTree	typeref:struct:QuadTree::QuadTree
north_west	quadtree.h	/^	struct QuadTree* north_west;$/;"	m	struct:QuadTree	typeref:struct:QuadTree::QuadTree
pointInRect	quadtree.h	/^bool pointInRect(const Point* const p, const Rect* const r)$/;"	f
points	game.h	/^SDL_Point points[POINT_COUNT];$/;"	v
points	quadtree.h	/^	vec_p_t points;$/;"	m	struct:QuadTree
prev	doub_link_list.h	/^	struct Node *next, *prev;$/;"	m	struct:Node	typeref:struct:Node::
qt	game.h	/^	struct QuadTree* qt;$/;"	m	struct:game_t	typeref:struct:game_t::QuadTree
qt_destroy	quadtree.h	/^bool qt_destroy(QuadTree* qt)$/;"	f
qt_getPointsInRect	quadtree.h	/^void qt_getPointsInRect(QuadTree* const qt, const Rect* const rect, vec_p_t* vec)$/;"	f
qt_init	quadtree.h	/^bool qt_init(QuadTree** qt, const Rect rect)$/;"	f
qt_insert	quadtree.h	/^bool qt_insert(QuadTree* const qt, const Point p)$/;"	f
qt_subdivide	quadtree.h	/^void qt_subdivide(QuadTree* const qt)$/;"	f
randomizePoints	game.h	/^void randomizePoints(void)$/;"	f
rect_array	game.h	/^	SDL_Rect rect_array[GRID_LENGTH];$/;"	m	struct:Grid
south_east	quadtree.h	/^	struct QuadTree* south_east;$/;"	m	struct:QuadTree	typeref:struct:QuadTree::QuadTree
south_west	quadtree.h	/^	struct QuadTree* south_west;$/;"	m	struct:QuadTree	typeref:struct:QuadTree::QuadTree
state	game.h	/^	enum state_t state;$/;"	m	struct:game_t	typeref:enum:game_t::state_t
state_t	game.h	/^enum state_t$/;"	g
tail	doub_link_list.h	/^	Node *head, *tail;$/;"	m	struct:List
total_points	quadtree.h	/^	size_t total_points;$/;"	m	struct:QuadTree
updateQTGrid	grid.c	/^void updateQTGrid(vec_rect_t* vec, vec_frect_t* f_vec)$/;"	f
v	game.h	/^	vec_point_t v;$/;"	m	struct:grid_t
vec_char_t	vec.h	/^typedef vec_t(char) vec_char_t;$/;"	t
vec_clear	vec.h	56;"	d
vec_compact	vec.h	64;"	d
vec_compact_	vec.c	/^int vec_compact_(char **data, int *length, int *capacity, int memsz)$/;"	f
vec_deinit	vec.h	30;"	d
vec_double_t	vec.h	/^typedef vec_t(double) vec_double_t;$/;"	t
vec_expand_	vec.c	/^int vec_expand_(char **data, int *length, int *capacity, int memsz)$/;"	f
vec_extend	vec.h	78;"	d
vec_find	vec.h	80;"	d
vec_first	vec.h	58;"	d
vec_float_t	vec.h	/^typedef vec_t(float) vec_float_t;$/;"	t
vec_foreach	vec.h	111;"	d
vec_foreach_ptr	vec.h	123;"	d
vec_foreach_ptr_rev	vec.h	129;"	d
vec_foreach_rev	vec.h	117;"	d
vec_frect_t	grid.c	/^typedef vec_t(SDL_FRect) vec_frect_t;$/;"	t	file:
vec_init	vec.h	28;"	d
vec_insert	vec.h	44;"	d
vec_insert_	vec.c	/^int vec_insert_(char **data, int *length, int *capacity, int memsz, int idx)$/;"	f
vec_int_t	vec.h	/^typedef vec_t(int) vec_int_t;$/;"	t
vec_last	vec.h	60;"	d
vec_p_t	quadtree.h	/^typedef vec_t(Point) vec_p_t;$/;"	t
vec_point_t	quadtree.h	/^typedef vec_t(Point) vec_point_t;$/;"	t
vec_pop	vec.h	36;"	d
vec_push	vec.h	32;"	d
vec_pusharr	vec.h	66;"	d
vec_rect_t	grid.c	/^typedef vec_t(SDL_Rect) vec_rect_t;$/;"	t	file:
vec_remove	vec.h	92;"	d
vec_reserve	vec.h	62;"	d
vec_reserve_	vec.c	/^int vec_reserve_(char **data, int *length, int *capacity, int memsz, int n)$/;"	f
vec_reserve_po2_	vec.c	/^int vec_reserve_po2_(char **data, int *length, int *capacity, int memsz, int n)$/;"	f
vec_reverse	vec.h	101;"	d
vec_sort	vec.h	49;"	d
vec_splice	vec.h	38;"	d
vec_splice_	vec.c	/^void vec_splice_($/;"	f
vec_str_t	vec.h	/^typedef vec_t(char *) vec_str_t;$/;"	t
vec_swap	vec.h	51;"	d
vec_swap_	vec.c	/^void vec_swap_($/;"	f
vec_swapsplice	vec.h	41;"	d
vec_swapsplice_	vec.c	/^void vec_swapsplice_($/;"	f
vec_t	vec.h	21;"	d
vec_truncate	vec.h	53;"	d
vec_unpack_	vec.h	18;"	d
vec_void_t	vec.h	/^typedef vec_t(void *) vec_void_t;$/;"	t
